/* automatically generated by rust-bindgen */
//Then heavily modified by Thoth Gunter 5/10/2019
#![allow(non_snake_case, dead_code, non_camel_case_types, non_camel_case_names)]


use std::ptr::{null, null_mut};
use winapi::um::libloaderapi::{LoadLibraryA, GetProcAddress};
use winapi::um::errhandlingapi::GetLastError;


pub const _STDINT_H: ::std::os::raw::c_uint = 1;
pub const _FEATURES_H: ::std::os::raw::c_uint = 1;
pub const _DEFAULT_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC11: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC99: ::std::os::raw::c_uint = 1;
pub const __USE_ISOC95: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX_IMPLICITLY: ::std::os::raw::c_uint = 1;
pub const _POSIX_SOURCE: ::std::os::raw::c_uint = 1;
pub const _POSIX_C_SOURCE: ::std::os::raw::c_uint = 200809;
pub const __USE_POSIX: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX2: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199309: ::std::os::raw::c_uint = 1;
pub const __USE_POSIX199506: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K: ::std::os::raw::c_uint = 1;
pub const __USE_XOPEN2K8: ::std::os::raw::c_uint = 1;
pub const _ATFILE_SOURCE: ::std::os::raw::c_uint = 1;
pub const __USE_MISC: ::std::os::raw::c_uint = 1;
pub const __USE_ATFILE: ::std::os::raw::c_uint = 1;
pub const __USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: ::std::os::raw::c_uint = 0;
pub const _STDC_PREDEF_H: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559__: ::std::os::raw::c_uint = 1;
pub const __STDC_IEC_559_COMPLEX__: ::std::os::raw::c_uint = 1;
pub const __STDC_ISO_10646__: ::std::os::raw::c_uint = 201706;
pub const __STDC_NO_THREADS__: ::std::os::raw::c_uint = 1;
pub const __GNU_LIBRARY__: ::std::os::raw::c_uint = 6;
pub const __GLIBC__: ::std::os::raw::c_uint = 2;
pub const __GLIBC_MINOR__: ::std::os::raw::c_uint = 26;
pub const _SYS_CDEFS_H: ::std::os::raw::c_uint = 1;
pub const __glibc_c99_flexarr_available: ::std::os::raw::c_uint = 1;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __WORDSIZE_TIME64_COMPAT32: ::std::os::raw::c_uint = 1;
pub const __SYSCALL_WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __HAVE_GENERIC_SELECTION: ::std::os::raw::c_uint = 1;
pub const __GLIBC_USE_LIB_EXT2: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: ::std::os::raw::c_uint = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: ::std::os::raw::c_uint = 0;
pub const _BITS_TYPES_H: ::std::os::raw::c_uint = 1;
pub const _BITS_TYPESIZES_H: ::std::os::raw::c_uint = 1;
pub const __OFF_T_MATCHES_OFF64_T: ::std::os::raw::c_uint = 1;
pub const __INO_T_MATCHES_INO64_T: ::std::os::raw::c_uint = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: ::std::os::raw::c_uint = 1;
pub const __FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const _BITS_WCHAR_H: ::std::os::raw::c_uint = 1;
pub const _BITS_STDINT_INTN_H: ::std::os::raw::c_uint = 1;
pub const _BITS_STDINT_UINTN_H: ::std::os::raw::c_uint = 1;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST32_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT_FAST32_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_int = -1;
pub const UINT_FAST32_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Debug, Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;

pub const TF_DataType_TF_COMPLEX: TF_DataType = TF_DataType::TF_COMPLEX64;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TF_DataType {
    TF_FLOAT = 1,
    TF_DOUBLE = 2,
    TF_INT32 = 3,
    TF_UINT8 = 4,
    TF_INT16 = 5,
    TF_INT8 = 6,
    TF_STRING = 7,
    TF_COMPLEX64 = 8,
    TF_INT64 = 9,
    TF_BOOL = 10,
    TF_QINT8 = 11,
    TF_QUINT8 = 12,
    TF_QINT32 = 13,
    TF_BFLOAT16 = 14,
    TF_QINT16 = 15,
    TF_QUINT16 = 16,
    TF_UINT16 = 17,
    TF_COMPLEX128 = 18,
    TF_HALF = 19,
    TF_RESOURCE = 20,
    TF_VARIANT = 21,
    TF_UINT32 = 22,
    TF_UINT64 = 23,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TF_Code {
    TF_OK = 0,
    TF_CANCELLED = 1,
    TF_UNKNOWN = 2,
    TF_INVALID_ARGUMENT = 3,
    TF_DEADLINE_EXCEEDED = 4,
    TF_NOT_FOUND = 5,
    TF_ALREADY_EXISTS = 6,
    TF_PERMISSION_DENIED = 7,
    TF_UNAUTHENTICATED = 16,
    TF_RESOURCE_EXHAUSTED = 8,
    TF_FAILED_PRECONDITION = 9,
    TF_ABORTED = 10,
    TF_OUT_OF_RANGE = 11,
    TF_UNIMPLEMENTED = 12,
    TF_INTERNAL = 13,
    TF_UNAVAILABLE = 14,
    TF_DATA_LOSS = 15,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _TF_Empty_Struct { _unused: [u8;0] }

pub type TF_Status = _TF_Empty_Struct;
pub type TF_Tensor = _TF_Empty_Struct;
pub type TF_SessionOptions = _TF_Empty_Struct;
pub type TF_Graph = _TF_Empty_Struct;
pub type TF_OperationDescription = _TF_Empty_Struct;
pub type TF_Operation = _TF_Empty_Struct;
pub type TF_Function = _TF_Empty_Struct;
pub type TF_FunctionOptions = _TF_Empty_Struct;
pub type TF_Session = _TF_Empty_Struct;
pub type TF_ImportGraphDefOptions = _TF_Empty_Struct;
pub type TF_ImportGraphDefResults = _TF_Empty_Struct;


#[repr(C)]
#[derive(Debug, Copy)]
pub struct TF_Buffer {
    pub data: *const ::std::os::raw::c_void,
    pub length: usize,
    pub data_deallocator: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void,
                                                                     length: usize)>,
}

#[test]
fn bindgen_test_layout_TF_Buffer() {
    assert_eq!(::std::mem::size_of::<TF_Buffer>() , 24usize , concat ! (
               "Size of: " , stringify ! ( TF_Buffer ) ));
    assert_eq! (::std::mem::align_of::<TF_Buffer>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TF_Buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Buffer ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Buffer ) , "::" ,
                stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Buffer ) ) . length as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Buffer ) , "::" ,
                stringify ! ( length ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Buffer ) ) . data_deallocator as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Buffer ) , "::" ,
                stringify ! ( data_deallocator ) ));
}
impl Clone for TF_Buffer {
    fn clone(&self) -> Self { *self }
}



#[repr(C)]
#[derive(Debug, Copy)]
pub struct TF_Input {
    pub oper: *mut TF_Operation,
    pub index: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_TF_Input() {
    assert_eq!(::std::mem::size_of::<TF_Input>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TF_Input ) ));
    assert_eq! (::std::mem::align_of::<TF_Input>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TF_Input ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Input ) ) . oper as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Input ) , "::" ,
                stringify ! ( oper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Input ) ) . index as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Input ) , "::" ,
                stringify ! ( index ) ));
}
impl Clone for TF_Input {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct TF_Output {
    pub oper: *mut TF_Operation,
    pub index: ::std::os::raw::c_int,
}
impl TF_Output{
    pub fn new()->TF_Output{
        TF_Output{
            oper: null_mut(),
            index: 0,
        }
    }
}
#[test]
fn bindgen_test_layout_TF_Output() {
    assert_eq!(::std::mem::size_of::<TF_Output>() , 16usize , concat ! (
               "Size of: " , stringify ! ( TF_Output ) ));
    assert_eq! (::std::mem::align_of::<TF_Output>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( TF_Output ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Output ) ) . oper as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Output ) , "::" ,
                stringify ! ( oper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_Output ) ) . index as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_Output ) , "::" ,
                stringify ! ( index ) ));
}
impl Clone for TF_Output {
    fn clone(&self) -> Self { *self }
}


#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum TF_AttrType {
    TF_ATTR_STRING = 0,
    TF_ATTR_INT = 1,
    TF_ATTR_FLOAT = 2,
    TF_ATTR_BOOL = 3,
    TF_ATTR_TYPE = 4,
    TF_ATTR_SHAPE = 5,
    TF_ATTR_TENSOR = 6,
    TF_ATTR_PLACEHOLDER = 7,
    TF_ATTR_FUNC = 8,
}


#[repr(C)]
#[derive(Debug, Copy)]
pub struct TF_AttrMetadata {
    pub is_list: ::std::os::raw::c_uchar,
    pub list_size: i64,
    pub type_: TF_AttrType,
    pub total_size: i64,
}
#[test]
fn bindgen_test_layout_TF_AttrMetadata() {
    assert_eq!(::std::mem::size_of::<TF_AttrMetadata>() , 32usize , concat ! (
               "Size of: " , stringify ! ( TF_AttrMetadata ) ));
    assert_eq! (::std::mem::align_of::<TF_AttrMetadata>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( TF_AttrMetadata ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_AttrMetadata ) ) . is_list as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_AttrMetadata ) ,
                "::" , stringify ! ( is_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_AttrMetadata ) ) . list_size as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_AttrMetadata ) ,
                "::" , stringify ! ( list_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_AttrMetadata ) ) . type_ as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_AttrMetadata ) ,
                "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const TF_AttrMetadata ) ) . total_size as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( TF_AttrMetadata ) ,
                "::" , stringify ! ( total_size ) ));
}
impl Clone for TF_AttrMetadata {
    fn clone(&self) -> Self { *self }
}


pub static mut _ERRO : i8 = 0;


unsafe extern "C" fn EMPTY_void__charstar()->*const i8{ _ERRO = -1; return null();}
unsafe extern "C" fn EMPTY_TF_DataType__usize(_dt: TF_DataType)->usize{ _ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_void__emptystruct()->*mut _TF_Empty_Struct{ _ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_emptystruct__(_arg1: *mut _TF_Empty_Struct){ _ERRO = -1;}
unsafe extern "C" fn EMPTY_emptystruct_TF_Code_charstar__(_s: *mut _TF_Empty_Struct, _code: TF_Code, _msg: *const u8){ _ERRO = -1;}
unsafe extern "C" fn EMPTY_emptystruct__TF_Code(_arg1: *const _TF_Empty_Struct)->TF_Code{ _ERRO = -1; return TF_Code::TF_UNKNOWN;}
unsafe extern "C" fn EMPTY_emptystruct__charstar(_arg1: *const _TF_Empty_Struct)->*const i8{ _ERRO = -1; return null();}
unsafe extern "C" fn EMPTY_cvoid_usize__TF_Buffer(_arg1: *const ::std::os::raw::c_void, _arg2: usize) -> *mut TF_Buffer{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_void__TF_Buffer() -> *mut TF_Buffer {_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_Buffer__(_arg1: *mut TF_Buffer) {_ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_Buffer__TF_Buffer(_arg1: *mut TF_Buffer) -> TF_Buffer {_ERRO = -1; return TF_Buffer{data: null(), length: 0, data_deallocator: None};}
unsafe extern "C" fn EMPTY_NewTensor(_arg1: TF_DataType, _arg2: *const i64, _arg3: ::std::os::raw::c_int, _arg4: *mut ::std::os::raw::c_void, _arg5: usize,
                                                        _arg6: unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, usize, *mut ::std::os::raw::c_void),
                                                        _arg7: *mut ::std::os::raw::c_void) -> *mut TF_Tensor{ _ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_Tensor__cvoid(_arg1: *const TF_Tensor)-> *mut ::std::os::raw::c_void { _ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_AllocateTensor(_arg1: TF_DataType, _arg2: *const i64, _arg3: ::std::os::raw::c_int, _arg4: usize)-> *mut TF_Tensor {_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_Tensor__(_arg1: *mut TF_Tensor){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_StringEncode(_arg1: *const u8, _arg2: usize, _arg3: *mut u8, _arg4: usize, _arg5: *mut TF_Status) -> usize {_ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_void__TF_SessionOptions() -> *mut TF_SessionOptions{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_SessionOptions__(_arg: *mut TF_SessionOptions){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_NewSession(_arg1: *mut TF_Graph, _arg2: *const TF_SessionOptions, _arg3: *mut TF_Status) -> *mut TF_Session {_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_LoadSessionFromSavedModel(
                                        _session_options:*const TF_SessionOptions,
                                        _run_options: *const TF_Buffer,
                                        _export_dir: *const u8,
                                        _tags: *const *const u8,
                                        _tags_len: ::std::os::raw::c_int,
                                        _graph: *mut TF_Graph,
                                        _meta_graph_def: *mut TF_Buffer,
                                        _status: *mut TF_Status)-> *mut TF_Session {_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_Session_TF_Status__(_arg1:*mut TF_Session, _arg2:*mut TF_Status){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_SessionRun(_session: *mut TF_Session,
                                         _run_options: *const TF_Buffer,
                                         _inputs: *const TF_Output,
                                         _input_values: *const *const TF_Tensor,
                                         _ninputs: ::std::os::raw::c_int,
                                         _outputs: *const TF_Output,
                                         _output_values: *mut *mut TF_Tensor,
                                         _noutputs: ::std::os::raw::c_int,
                                         _target_opers: *const *const TF_Operation,
                                         _ntargets: ::std::os::raw::c_int,
                                         _run_metadata: *mut TF_Buffer, arg1: *mut TF_Status){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_NewGraph()->*mut TF_Graph {_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_Graph(_arg1: *mut TF_Graph){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_NewImportGraphDefOptions() -> *mut TF_ImportGraphDefOptions{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_DeleteImportGaphDefOptions(_arg1:*mut TF_ImportGraphDefOptions){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_Graph_charstar__TF_Operation(_graph: *mut TF_Graph, _oper_name: *const u8)-> *mut TF_Operation{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_GraphImportGraphDef(_graph: *mut TF_Graph, _graph_def: *const TF_Buffer, _options: *const TF_ImportGraphDefOptions, _status: *mut TF_Status){ _ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_TensorByteSize(arg1: *const TF_Tensor) -> usize{ _ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_TF_TensorType(arg1: *const TF_Tensor) -> TF_DataType{_ERRO = -1; return TF_DataType::TF_FLOAT;}//TODO this should return something that breaks tensorflow
unsafe extern "C" fn EMPTY_TF_ImportGraphDefOptionsNumReturnOutputs(opts: *const TF_ImportGraphDefOptions) -> i32{_ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_TF_GraphNumFunctions (g: *const TF_Graph) -> i32{_ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_TF_Operation__(oper: *mut TF_Operation) -> *const i8 {_ERRO = -1; return null();}
unsafe extern "C" fn EMPTY_TF_GraphNextOperation(graph: *mut TF_Graph, pos: *mut usize)-> *mut TF_Operation{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_OperationNumOutputs(oper: *mut TF_Operation)-> i32 {_ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_TF_GraphGetTensorNumDims(graph: *mut TF_Graph, output: TF_Output, status: *mut TF_Status)-> i32{_ERRO = -1; return 0;}
unsafe extern "C" fn EMPTY_TF_OperationOutputType(oper_out: TF_Output) -> TF_DataType{ _ERRO = -1; return TF_DataType::TF_FLOAT}//TODO this should return something that breaks tensorflow

unsafe extern "C" fn EMPTY_TF_GraphGetTensorShape(graph: *mut TF_Graph, output: TF_Output, dims: *mut i64, num_dims: i32, status: *mut TF_Status){_ERRO = -1;}
unsafe extern "C" fn EMPTY_TF_NewOperation(graph: *mut TF_Graph, op_type: *const ::std::os::raw::c_char, oper_name: *const ::std::os::raw::c_char)-> *mut TF_OperationDescription{ _ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_FinishOperation(desc: *mut TF_OperationDescription, status: *mut TF_Status) -> *mut TF_Operation{_ERRO = -1; return null_mut();}
unsafe extern "C" fn EMPTY_TF_AddInputList(desc: *mut TF_OperationDescription, inputs: *const TF_Output, num_inputs: ::std::os::raw::c_int){ _ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_AddInput(desc: *mut TF_OperationDescription, input: TF_Output){ _ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_SetAttrType(desc: *mut TF_OperationDescription, attr_name: *const i8, value: TF_DataType){ _ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_SetAttrTensor(desc: *mut TF_OperationDescription, attr_name: *const i8, value: *mut TF_Tensor, status: *mut TF_Status){ _ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_SetAttrShape(desc: *mut TF_OperationDescription, attr_name: *const ::std::os::raw::c_char, dims: *const i64, num_dims: i32){ _ERRO = -1; }
unsafe extern "C" fn EMPTY_TF_SetAttrBool(  desc: *mut TF_OperationDescription,  attr_name: *const ::std::os::raw::c_char,  value: ::std::os::raw::c_uchar){ _ERRO = -1; }



pub static mut TF_Version      : unsafe extern "C" fn()->*const i8 = EMPTY_void__charstar;
pub static mut TF_DataTypeSize : unsafe extern "C" fn(TF_DataType)->usize = EMPTY_TF_DataType__usize;
pub static mut TF_NewStatus    : unsafe extern "C" fn()->*mut _TF_Empty_Struct = EMPTY_void__emptystruct;
pub static mut TF_DeleteStatus : unsafe extern "C" fn(*mut _TF_Empty_Struct) = EMPTY_emptystruct__;
pub static mut TF_SetStatus    : unsafe extern "C" fn(*mut TF_Status,  TF_Code, *const u8) = EMPTY_emptystruct_TF_Code_charstar__;
pub static mut TF_GetCode      : unsafe extern "C" fn(*const TF_Status) -> TF_Code = EMPTY_emptystruct__TF_Code;
pub static mut TF_Message      : unsafe extern "C" fn(*const TF_Status) -> *const i8 = EMPTY_emptystruct__charstar;
pub static mut TF_NewBufferFromString: unsafe extern "C" fn(*const ::std::os::raw::c_void, usize) -> *mut TF_Buffer = EMPTY_cvoid_usize__TF_Buffer;
pub static mut TF_NewBuffer    : unsafe extern "C" fn() -> *mut TF_Buffer = EMPTY_void__TF_Buffer;
pub static mut TF_DeleteBuffer : unsafe extern "C" fn(*mut TF_Buffer) = EMPTY_TF_Buffer__;
pub static mut TF_GetBuffer    : unsafe extern "C" fn(*mut TF_Buffer) -> TF_Buffer = EMPTY_TF_Buffer__TF_Buffer;
pub static mut TF_NewTensor    : unsafe extern "C" fn(TF_DataType,  *const i64, ::std::os::raw::c_int, *mut ::std::os::raw::c_void, usize,
                                                        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, usize, *mut ::std::os::raw::c_void),
                                                        *mut ::std::os::raw::c_void) -> *mut TF_Tensor = EMPTY_NewTensor;
pub static mut TF_TensorData    : unsafe extern "C" fn(*const TF_Tensor)-> *mut ::std::os::raw::c_void = EMPTY_TF_Tensor__cvoid;
pub static mut TF_AllocateTensor: unsafe extern "C" fn(TF_DataType, *const i64, ::std::os::raw::c_int, usize)-> *mut TF_Tensor = EMPTY_AllocateTensor;
pub static mut TF_DeleteTensor  : unsafe extern "C" fn(*mut TF_Tensor) = EMPTY_TF_Tensor__;
pub static mut TF_TensorByteSize: unsafe extern "C" fn(arg1: *const TF_Tensor) -> usize = EMPTY_TF_TensorByteSize;
pub static mut TF_TensorType    : unsafe extern "C" fn(arg1: *const TF_Tensor) -> TF_DataType = EMPTY_TF_TensorType;
/*
    pub fn TF_TensorMaybeMove(tensor: *mut TF_Tensor) -> *mut TF_Tensor;
    pub fn TF_NumDims(arg1: *const TF_Tensor) -> ::std::os::raw::c_int;
    pub fn TF_Dim(tensor: *const TF_Tensor, dim_index: ::std::os::raw::c_int)
     -> i64;
*/
pub static mut TF_StringEncode: unsafe extern "C" fn(*const u8, usize, *mut u8, usize, *mut TF_Status) -> usize = EMPTY_TF_StringEncode;
pub static mut TF_NewSessionOptions: unsafe extern "C" fn() -> *mut TF_SessionOptions = EMPTY_void__TF_SessionOptions;
pub static mut TF_DeleteSessionOptions: unsafe extern "C" fn(*mut TF_SessionOptions) = EMPTY_TF_SessionOptions__;

/*
    pub fn TF_StringDecode(src: *const ::std::os::raw::c_char, src_len: usize,
                           dst: *mut *const ::std::os::raw::c_char,
                           dst_len: *mut usize, status: *mut TF_Status)
     -> usize;
    pub fn TF_StringEncodedSize(len: usize) -> usize;
    pub fn TF_SetTarget(options: *mut TF_SessionOptions,
                        target: *const ::std::os::raw::c_char);
    pub fn TF_SetConfig(options: *mut TF_SessionOptions,
                        proto: *const ::std::os::raw::c_void,
                        proto_len: usize, status: *mut TF_Status);
*/
pub static mut TF_NewSession: unsafe extern "C" fn(*mut TF_Graph, *const TF_SessionOptions, *mut TF_Status) -> *mut TF_Session = EMPTY_TF_NewSession;
pub static mut TF_LoadSessionFromSavedModel: unsafe extern "C" fn(
                                        *const TF_SessionOptions,
                                        *const TF_Buffer,
                                        *const u8 ,
                                        *const *const u8,
                                        ::std::os::raw::c_int,
                                        *mut TF_Graph,
                                        *mut TF_Buffer,
                                        *mut TF_Status)-> *mut TF_Session = EMPTY_TF_LoadSessionFromSavedModel;
pub static mut TF_CloseSession: unsafe extern "C" fn(*mut TF_Session, *mut TF_Status) = EMPTY_TF_Session_TF_Status__;
pub static mut TF_DeleteSession: unsafe extern "C" fn(*mut TF_Session, *mut TF_Status) = EMPTY_TF_Session_TF_Status__;
pub static mut TF_SessionRun : unsafe extern "C" fn(*mut TF_Session,
                                                    *const TF_Buffer,
                                                    *const TF_Output,
                                                    *const *const TF_Tensor,
                                                    ::std::os::raw::c_int,
                                                    *const TF_Output,
                                                    *mut *mut TF_Tensor,
                                                    ::std::os::raw::c_int,
                                                    *const *const TF_Operation,
                                                    ::std::os::raw::c_int,
                                                    *mut TF_Buffer, arg1: *mut TF_Status) = EMPTY_TF_SessionRun;
/*
extern "C" {
-----
    pub fn TF_SessionPRunSetup(arg1: *mut TF_Session,
                               inputs: *const TF_Output,
                               ninputs: ::std::os::raw::c_int,
                               outputs: *const TF_Output,
                               noutputs: ::std::os::raw::c_int,
                               target_opers: *const *const TF_Operation,
                               ntargets: ::std::os::raw::c_int,
                               handle: *mut *const ::std::os::raw::c_char,
                               arg2: *mut TF_Status);
    pub fn TF_SessionPRun(arg1: *mut TF_Session,
                          handle: *const ::std::os::raw::c_char,
                          inputs: *const TF_Output,
                          input_values: *const *const TF_Tensor,
                          ninputs: ::std::os::raw::c_int,
                          outputs: *const TF_Output,
                          output_values: *mut *mut TF_Tensor,
                          noutputs: ::std::os::raw::c_int,
                          target_opers: *const *const TF_Operation,
                          ntargets: ::std::os::raw::c_int,
                          arg2: *mut TF_Status);
    pub fn TF_DeletePRunHandle(handle: *const ::std::os::raw::c_char);
}
*/
pub static mut TF_NewGraph   : unsafe extern "C" fn() -> *mut TF_Graph = EMPTY_TF_NewGraph;
pub static mut TF_DeleteGraph: unsafe extern "C" fn(arg1: *mut TF_Graph) = EMPTY_TF_Graph;
pub static mut TF_NewImportGraphDefOptions: unsafe extern "C" fn() -> *mut TF_ImportGraphDefOptions = EMPTY_TF_NewImportGraphDefOptions;
pub static mut TF_DeleteImportGraphDefOptions: unsafe extern "C" fn (*mut TF_ImportGraphDefOptions) = EMPTY_TF_DeleteImportGaphDefOptions;
pub static mut TF_ImportGraphDefOptionsNumReturnOutputs: unsafe extern "C" fn (*const TF_ImportGraphDefOptions) -> i32 = EMPTY_TF_ImportGraphDefOptionsNumReturnOutputs;
pub static mut TF_ImportGraphDefOptionsNumReturnOperations: unsafe extern "C" fn (opts: *const TF_ImportGraphDefOptions) -> i32 = EMPTY_TF_ImportGraphDefOptionsNumReturnOutputs;
/*
extern "C" {
    pub fn TF_ImportGraphDefOptionsSetPrefix(opts:
                                                 *mut TF_ImportGraphDefOptions,
                                             prefix:
                                                 *const ::std::os::raw::c_char);
    pub fn TF_ImportGraphDefOptionsSetDefaultDevice(opts:
                                                        *mut TF_ImportGraphDefOptions,
                                                    device:
                                                        *const ::std::os::raw::c_char);
    pub fn TF_ImportGraphDefOptionsSetUniquifyNames(opts:
                                                        *mut TF_ImportGraphDefOptions,
                                                    uniquify_names:
                                                        ::std::os::raw::c_uchar);
    pub fn TF_ImportGraphDefOptionsSetUniquifyPrefix(opts:
                                                         *mut TF_ImportGraphDefOptions,
                                                     uniquify_prefix:
                                                         ::std::os::raw::c_uchar);
    pub fn TF_ImportGraphDefOptionsAddInputMapping(opts:
                                                       *mut TF_ImportGraphDefOptions,
                                                   src_name:
                                                       *const ::std::os::raw::c_char,
                                                   src_index:
                                                       ::std::os::raw::c_int,
                                                   dst: TF_Output);
    pub fn TF_ImportGraphDefOptionsRemapControlDependency(opts:
                                                              *mut TF_ImportGraphDefOptions,
                                                          src_name:
                                                              *const ::std::os::raw::c_char,
                                                          dst:
                                                              *mut TF_Operation);
    pub fn TF_ImportGraphDefOptionsAddControlDependency(opts:
                                                            *mut TF_ImportGraphDefOptions,
                                                        oper:
                                                            *mut TF_Operation);
    pub fn TF_ImportGraphDefOptionsAddReturnOutput(opts:
                                                       *mut TF_ImportGraphDefOptions,
                                                   oper_name:
                                                       *const ::std::os::raw::c_char,
                                                   index:
                                                       ::std::os::raw::c_int);
    pub fn TF_ImportGraphDefOptionsAddReturnOperation(opts:
                                                          *mut TF_ImportGraphDefOptions,
                                                      oper_name:
                                                          *const ::std::os::raw::c_char);
}
*/

pub static mut TF_GraphOperationByName : unsafe extern "C" fn(*mut TF_Graph, *const u8)-> *mut TF_Operation = EMPTY_TF_Graph_charstar__TF_Operation;
pub static mut TF_GraphNextOperation   : unsafe extern "C" fn(graph: *mut TF_Graph, pos: *mut usize)-> *mut TF_Operation = EMPTY_TF_GraphNextOperation;

/*
extern "C" {
    pub fn TF_OperationGetAttrMetadata(oper: *mut TF_Operation,
                                       attr_name:
                                           *const ::std::os::raw::c_char,
                                       status: *mut TF_Status)
     -> TF_AttrMetadata;
    pub fn TF_OperationGetAttrString(oper: *mut TF_Operation,
                                     attr_name: *const ::std::os::raw::c_char,
                                     value: *mut ::std::os::raw::c_void,
                                     max_length: usize,
                                     status: *mut TF_Status);
    pub fn TF_OperationGetAttrStringList(oper: *mut TF_Operation,
                                         attr_name:
                                             *const ::std::os::raw::c_char,
                                         values:
                                             *mut *mut ::std::os::raw::c_void,
                                         lengths: *mut usize,
                                         max_values: ::std::os::raw::c_int,
                                         storage: *mut ::std::os::raw::c_void,
                                         storage_size: usize,
                                         status: *mut TF_Status);
    pub fn TF_OperationGetAttrInt(oper: *mut TF_Operation,
                                  attr_name: *const ::std::os::raw::c_char,
                                  value: *mut i64, status: *mut TF_Status);
    pub fn TF_OperationGetAttrIntList(oper: *mut TF_Operation,
                                      attr_name:
                                          *const ::std::os::raw::c_char,
                                      values: *mut i64,
                                      max_values: ::std::os::raw::c_int,
                                      status: *mut TF_Status);
    pub fn TF_OperationGetAttrFloat(oper: *mut TF_Operation,
                                    attr_name: *const ::std::os::raw::c_char,
                                    value: *mut f32, status: *mut TF_Status);
    pub fn TF_OperationGetAttrFloatList(oper: *mut TF_Operation,
                                        attr_name:
                                            *const ::std::os::raw::c_char,
                                        values: *mut f32,
                                        max_values: ::std::os::raw::c_int,
                                        status: *mut TF_Status);
    pub fn TF_OperationGetAttrBool(oper: *mut TF_Operation,
                                   attr_name: *const ::std::os::raw::c_char,
                                   value: *mut ::std::os::raw::c_uchar,
                                   status: *mut TF_Status);
    pub fn TF_OperationGetAttrBoolList(oper: *mut TF_Operation,
                                       attr_name:
                                           *const ::std::os::raw::c_char,
                                       values: *mut ::std::os::raw::c_uchar,
                                       max_values: ::std::os::raw::c_int,
                                       status: *mut TF_Status);
    pub fn TF_OperationGetAttrType(oper: *mut TF_Operation,
                                   attr_name: *const ::std::os::raw::c_char,
                                   value: *mut TF_DataType,
                                   status: *mut TF_Status);
    pub fn TF_OperationGetAttrTypeList(oper: *mut TF_Operation,
                                       attr_name:
                                           *const ::std::os::raw::c_char,
                                       values: *mut TF_DataType,
                                       max_values: ::std::os::raw::c_int,
                                       status: *mut TF_Status);
    pub fn TF_OperationGetAttrShape(oper: *mut TF_Operation,
                                    attr_name: *const ::std::os::raw::c_char,
                                    value: *mut i64,
                                    num_dims: ::std::os::raw::c_int,
                                    status: *mut TF_Status);
    pub fn TF_OperationGetAttrShapeList(oper: *mut TF_Operation,
                                        attr_name:
                                            *const ::std::os::raw::c_char,
                                        dims: *mut *mut i64,
                                        num_dims: *mut ::std::os::raw::c_int,
                                        num_shapes: ::std::os::raw::c_int,
                                        storage: *mut i64,
                                        storage_size: ::std::os::raw::c_int,
                                        status: *mut TF_Status);
    pub fn TF_OperationGetAttrTensorShapeProto(oper: *mut TF_Operation,
                                               attr_name:
                                                   *const ::std::os::raw::c_char,
                                               value: *mut TF_Buffer,
                                               status: *mut TF_Status);
    pub fn TF_OperationGetAttrTensorShapeProtoList(oper: *mut TF_Operation,
                                                   attr_name:
                                                       *const ::std::os::raw::c_char,
                                                   values:
                                                       *mut *mut TF_Buffer,
                                                   max_values:
                                                       ::std::os::raw::c_int,
                                                   status: *mut TF_Status);
    pub fn TF_OperationGetAttrTensor(oper: *mut TF_Operation,
                                     attr_name: *const ::std::os::raw::c_char,
                                     value: *mut *mut TF_Tensor,
                                     status: *mut TF_Status);
    pub fn TF_OperationGetAttrTensorList(oper: *mut TF_Operation,
                                         attr_name:
                                             *const ::std::os::raw::c_char,
                                         values: *mut *mut TF_Tensor,
                                         max_values: ::std::os::raw::c_int,
                                         status: *mut TF_Status);
    pub fn TF_OperationGetAttrValueProto(oper: *mut TF_Operation,
                                         attr_name:
                                             *const ::std::os::raw::c_char,
                                         output_attr_value: *mut TF_Buffer,
                                         status: *mut TF_Status);
    pub fn TF_GraphToGraphDef(graph: *mut TF_Graph,
                              output_graph_def: *mut TF_Buffer,
                              status: *mut TF_Status);
    pub fn TF_GraphGetOpDef(graph: *mut TF_Graph,
                            op_name: *const ::std::os::raw::c_char,
                            output_op_def: *mut TF_Buffer,
                            status: *mut TF_Status);
    pub fn TF_GraphVersions(graph: *mut TF_Graph,
                            output_version_def: *mut TF_Buffer,
                            status: *mut TF_Status);
}
*/
pub static mut TF_GraphImportGraphDef: unsafe extern "C" fn (graph: *mut TF_Graph, graph_def: *const TF_Buffer, options: *const TF_ImportGraphDefOptions, status: *mut TF_Status) = EMPTY_TF_GraphImportGraphDef;
pub static mut TF_GraphNumFunctions: unsafe extern "C" fn (g: *const TF_Graph) -> i32 = EMPTY_TF_GraphNumFunctions;

/*
extern "C" {
    pub fn TF_ImportGraphDefResultsReturnOutputs(results:
                                                     *mut TF_ImportGraphDefResults,
                                                 num_outputs:
                                                     *mut ::std::os::raw::c_int,
                                                 outputs:
                                                     *mut *mut TF_Output);
    pub fn TF_ImportGraphDefResultsReturnOperations(results:
                                                        *mut TF_ImportGraphDefResults,
                                                    num_opers:
                                                        *mut ::std::os::raw::c_int,
                                                    opers:
                                                        *mut *mut *mut TF_Operation);
    pub fn TF_ImportGraphDefResultsMissingUnusedInputMappings(results:
                                                                  *mut TF_ImportGraphDefResults,
                                                              num_missing_unused_input_mappings:
                                                                  *mut ::std::os::raw::c_int,
                                                              src_names:
                                                                  *mut *mut *const ::std::os::raw::c_char,
                                                              src_indexes:
                                                                  *mut *mut ::std::os::raw::c_int);
    pub fn TF_DeleteImportGraphDefResults(results:
                                              *mut TF_ImportGraphDefResults);
    pub fn TF_GraphImportGraphDefWithResults(graph: *mut TF_Graph,
                                             graph_def: *const TF_Buffer,
                                             options:
                                                 *const TF_ImportGraphDefOptions,
                                             status: *mut TF_Status)
     -> *mut TF_ImportGraphDefResults;
    pub fn TF_GraphImportGraphDefWithReturnOutputs(graph: *mut TF_Graph,
                                                   graph_def:
                                                       *const TF_Buffer,
                                                   options:
                                                       *const TF_ImportGraphDefOptions,
                                                   return_outputs:
                                                       *mut TF_Output,
                                                   num_return_outputs:
                                                       ::std::os::raw::c_int,
                                                   status: *mut TF_Status);
    pub fn TF_GraphCopyFunction(g: *mut TF_Graph, func: *const TF_Function,
                                grad: *const TF_Function,
                                status: *mut TF_Status);
    pub fn TF_GraphGetFunctions(g: *mut TF_Graph,
                                funcs: *mut *mut TF_Function,
                                max_func: ::std::os::raw::c_int,
                                status: *mut TF_Status)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationToNodeDef(oper: *mut TF_Operation,
                                 output_node_def: *mut TF_Buffer,
                                 status: *mut TF_Status);
}
*/
pub static mut TF_OperationName: unsafe extern "C" fn (oper: *mut TF_Operation) -> *const i8 = EMPTY_TF_Operation__;
pub static mut TF_OperationOpType: unsafe extern "C" fn (oper: *mut TF_Operation)-> *const i8 = EMPTY_TF_Operation__;
pub static mut TF_OperationNumOutputs: unsafe extern "C" fn (oper: *mut TF_Operation)-> i32 = EMPTY_TF_OperationNumOutputs;
pub static mut TF_OperationNumInputs: unsafe extern "C" fn(oper: *mut TF_Operation)->i32 = EMPTY_TF_OperationNumOutputs;
pub static mut TF_OperationDevice: unsafe extern "C" fn(oper: *mut TF_Operation)->*const i8 = EMPTY_TF_Operation__;
pub static mut TF_GraphGetTensorNumDims: unsafe extern "C" fn(graph: *mut TF_Graph, output: TF_Output, status: *mut TF_Status)-> i32 = EMPTY_TF_GraphGetTensorNumDims;
pub static mut TF_OperationOutputType: unsafe extern "C" fn(oper_out: TF_Output) -> TF_DataType = EMPTY_TF_OperationOutputType;

pub static mut TF_GraphGetTensorShape: unsafe extern "C" fn(graph: *mut TF_Graph, output: TF_Output, dims: *mut i64, num_dims: i32, status: *mut TF_Status) = EMPTY_TF_GraphGetTensorShape;
pub static mut TF_SetAttrShape : unsafe extern "C" fn(desc: *mut TF_OperationDescription, attr_name: *const i8, dims: *const i64, num_dims: i32) = EMPTY_TF_SetAttrShape;
pub static mut TF_SetAttrBool  : unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: u8) = EMPTY_TF_SetAttrBool;


/*
extern "C" {
    pub fn TF_GraphSetTensorShape(graph: *mut TF_Graph, output: TF_Output,
                                  dims: *const i64,
                                  num_dims: ::std::os::raw::c_int,
                                  status: *mut TF_Status);
    pub fn TF_SetDevice(desc: *mut TF_OperationDescription,
                        device: *const ::std::os::raw::c_char);
    pub fn TF_AddControlInput(desc: *mut TF_OperationDescription,
                              input: *mut TF_Operation);
    pub fn TF_ColocateWith(desc: *mut TF_OperationDescription,
                           op: *mut TF_Operation);
    pub fn TF_SetAttrString(desc: *mut TF_OperationDescription,
                            attr_name: *const ::std::os::raw::c_char,
                            value: *const ::std::os::raw::c_void,
                            length: usize);
    pub fn TF_SetAttrStringList(desc: *mut TF_OperationDescription,
                                attr_name: *const ::std::os::raw::c_char,
                                values: *const *const ::std::os::raw::c_void,
                                lengths: *const usize,
                                num_values: ::std::os::raw::c_int);
    pub fn TF_SetAttrInt(desc: *mut TF_OperationDescription,
                         attr_name: *const ::std::os::raw::c_char,
                         value: i64);
    pub fn TF_SetAttrIntList(desc: *mut TF_OperationDescription,
                             attr_name: *const ::std::os::raw::c_char,
                             values: *const i64,
                             num_values: ::std::os::raw::c_int);
    pub fn TF_SetAttrFloat(desc: *mut TF_OperationDescription,
                           attr_name: *const ::std::os::raw::c_char,
                           value: f32);
    pub fn TF_SetAttrFloatList(desc: *mut TF_OperationDescription,
                               attr_name: *const ::std::os::raw::c_char,
                               values: *const f32,
                               num_values: ::std::os::raw::c_int);
    pub fn TF_SetAttrBoolList(desc: *mut TF_OperationDescription,
                              attr_name: *const ::std::os::raw::c_char,
                              values: *const ::std::os::raw::c_uchar,
                              num_values: ::std::os::raw::c_int);
    pub fn TF_SetAttrTypeList(desc: *mut TF_OperationDescription,
                              attr_name: *const ::std::os::raw::c_char,
                              values: *const TF_DataType,
                              num_values: ::std::os::raw::c_int);
    pub fn TF_SetAttrFuncName(desc: *mut TF_OperationDescription,
                              attr_name: *const ::std::os::raw::c_char,
                              value: *const ::std::os::raw::c_char,
                              length: usize);
    pub fn TF_SetAttrShapeList(desc: *mut TF_OperationDescription,
                               attr_name: *const ::std::os::raw::c_char,
                               dims: *const *const i64,
                               num_dims: *const ::std::os::raw::c_int,
                               num_shapes: ::std::os::raw::c_int);
    pub fn TF_SetAttrTensorShapeProto(desc: *mut TF_OperationDescription,
                                      attr_name:
                                          *const ::std::os::raw::c_char,
                                      proto: *const ::std::os::raw::c_void,
                                      proto_len: usize,
                                      status: *mut TF_Status);
    pub fn TF_SetAttrTensorShapeProtoList(desc: *mut TF_OperationDescription,
                                          attr_name:
                                              *const ::std::os::raw::c_char,
                                          protos:
                                              *const *const ::std::os::raw::c_void,
                                          proto_lens: *const usize,
                                          num_shapes: ::std::os::raw::c_int,
                                          status: *mut TF_Status);
    pub fn TF_SetAttrTensorList(desc: *mut TF_OperationDescription,
                                attr_name: *const ::std::os::raw::c_char,
                                values: *const *const TF_Tensor,
                                num_values: ::std::os::raw::c_int,
                                status: *mut TF_Status);
    pub fn TF_SetAttrValueProto(desc: *mut TF_OperationDescription,
                                attr_name: *const ::std::os::raw::c_char,
                                proto: *const ::std::os::raw::c_void,
                                proto_len: usize, status: *mut TF_Status);
    pub fn TF_OperationOutputListLength(oper: *mut TF_Operation,
                                        arg_name:
                                            *const ::std::os::raw::c_char,
                                        status: *mut TF_Status)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationInputType(oper_in: TF_Input) -> TF_DataType;
    pub fn TF_OperationInputListLength(oper: *mut TF_Operation,
                                       arg_name:
                                           *const ::std::os::raw::c_char,
                                       status: *mut TF_Status)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationInput(oper_in: TF_Input) -> TF_Output;
    pub fn TF_OperationOutputNumConsumers(oper_out: TF_Output)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationOutputConsumers(oper_out: TF_Output,
                                       consumers: *mut TF_Input,
                                       max_consumers: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationNumControlInputs(oper: *mut TF_Operation)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationGetControlInputs(oper: *mut TF_Operation,
                                        control_inputs:
                                            *mut *mut TF_Operation,
                                        max_control_inputs:
                                            ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationNumControlOutputs(oper: *mut TF_Operation)
     -> ::std::os::raw::c_int;
    pub fn TF_OperationGetControlOutputs(oper: *mut TF_Operation,
                                         control_outputs:
                                             *mut *mut TF_Operation,
                                         max_control_outputs:
                                             ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
*/
pub static mut TF_NewOperation: unsafe extern "C" fn (graph: *mut TF_Graph, 
                                                      op_type: *const ::std::os::raw::c_char, 
                                                      oper_name: *const ::std::os::raw::c_char) -> *mut TF_OperationDescription = EMPTY_TF_NewOperation;

pub static mut TF_FinishOperation : unsafe extern "C" fn (desc: *mut TF_OperationDescription,
                                                          status: *mut TF_Status) -> *mut TF_Operation = EMPTY_TF_FinishOperation;

pub static mut TF_AddInputList: unsafe extern "C" fn (desc: *mut TF_OperationDescription, inputs: *const TF_Output, num_inputs: ::std::os::raw::c_int) = EMPTY_TF_AddInputList;

pub static mut TF_AddInput: unsafe extern "C" fn (desc: *mut TF_OperationDescription, input: TF_Output) = EMPTY_TF_AddInput;
pub static mut TF_SetAttrType: unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: TF_DataType) = EMPTY_TF_SetAttrType;
pub static mut TF_SetAttrTensor: unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: *mut TF_Tensor, status: *mut TF_Status) = EMPTY_TF_SetAttrTensor;

// The data in the buffer will be the serialized OpList proto for ops registered
// in this address space.
pub static mut TF_GetAllOpList: unsafe extern "C" fn()->*mut TF_Buffer = EMPTY_void__TF_Buffer;




pub fn tensorflow_init( path: Option<&str>)->Result<(), String>{unsafe{
    //TODO
    //There has to be a better way to get file to lib or something... should not be hard coded.
    println!("tensorflow rs binding file: {}", file!());
    println!("current directroy {:?}", std::env::current_dir());
    let lib;
    match path {
        Some(p)=> {
                      println!("loading from path: {}", p); 
                      lib = LoadLibraryA( p.as_ptr() as *const i8); },
        None   => { lib = LoadLibraryA("tensorflow_assets\\tensorflow.dll\0".as_ptr() as *const i8); }
    }
    if null() == lib{
        let s = format!("Could not open lib \n{:?}", GetLastError());
        return Err(s);
    }
    //TODO
    //check for redundancy
    let function_names = [  "TF_Version\0", "TF_DataTypeSize\0", "TF_NewStatus\0", "TF_DeleteStatus\0", "TF_SetStatus\0",
                            "TF_GetCode\0", "TF_Message\0", "TF_NewBufferFromString\0", "TF_NewBuffer\0", "TF_DeleteBuffer\0",
                            "TF_GetBuffer\0", "TF_NewTensor\0", "TF_TensorData\0", "TF_AllocateTensor\0", "TF_DeleteTensor\0",
                            "TF_StringEncode\0", "TF_NewSessionOptions\0", "TF_DeleteSessionOptions\0", "TF_NewSession\0",
                            "TF_LoadSessionFromSavedModel\0", "TF_CloseSession\0", "TF_DeleteSession\0", "TF_SessionRun\0",
                            "TF_NewGraph\0", "TF_DeleteGraph\0", "TF_NewImportGraphDefOptions\0", "TF_DeleteImportGraphDefOptions\0",
                            "TF_GraphOperationByName\0", "TF_GraphImportGraphDef\0", "TF_TensorByteSize\0", "TF_ImportGraphDefOptionsNumReturnOutputs\0",
                            "TF_GraphNumFunctions\0", "TF_ImportGraphDefOptionsNumReturnOperations\0", "TF_OperationName\0",
                            "TF_GraphNextOperation\0", "TF_OperationOpType\0", "TF_OperationNumOutputs\0", "TF_OperationNumInputs\0",
                            "TF_OperationDevice\0", "TF_GraphGetTensorNumDims\0", "TF_GraphGetTensorShape\0",
                            "TF_GetAllOpList\0", "TF_NewOperation\0", "TF_FinishOperation\0", "TF_AddInputList\0", "TF_AddInput\0",
                            "TF_SetAttrType\0", "TF_SetAttrTensor\0", "TF_TensorType\0", "TF_SetAttrShape\0", "TF_SetAttrBool\0",
                            "TF_OperationOutputType\0"];
    for it in function_names.iter(){
        let function = GetProcAddress(lib, it.as_ptr() as *const i8) as *const usize;
        if null() == function{
            let s = format!("Could not get function \n{:?}", GetLastError());
            return Err(s);
        }
        if *it == "TF_Version\0" {
            TF_Version = std::mem::transmute::<*const usize, unsafe extern "C" fn()->*const i8>(function);
        } else if *it == "TF_DataTypeSize\0"{
            TF_DataTypeSize = std::mem::transmute::<*const usize, unsafe extern "C" fn(TF_DataType)->usize>(function);
        } else if *it == "TF_NewStatus\0"{
            TF_NewStatus = std::mem::transmute::<*const usize, unsafe extern "C" fn()->*mut _TF_Empty_Struct>(function);
        } else if *it == "TF_DeleteStatus\0"{
            TF_DeleteStatus = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut _TF_Empty_Struct)>(function);
        } else if *it == "TF_SetStatus\0"{
            TF_SetStatus = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Status,  TF_Code, *const u8) >(function);
        } else if *it == "TF_GetCode\0"{
            TF_GetCode = std::mem::transmute::<*const usize, unsafe extern "C" fn(*const TF_Status) -> TF_Code >(function);
        } else if *it == "TF_Message\0"{
            TF_Message = std::mem::transmute::<*const usize, unsafe extern "C" fn(*const TF_Status) -> *const i8  >(function);
        } else if *it == "TF_NewBufferFromString\0"{
            TF_NewBufferFromString = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*const ::std::os::raw::c_void, usize) -> *mut TF_Buffer  >(function);
        } else if *it == "TF_NewBuffer\0"{
            TF_NewBuffer = std::mem::transmute::<*const usize,  unsafe extern "C" fn() -> *mut TF_Buffer  >(function);
        } else if *it == "TF_DeleteBuffer\0"{
            TF_DeleteBuffer = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_Buffer) >(function);
        } else if *it == "TF_GetBuffer\0"{
            TF_GetBuffer = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_Buffer)->TF_Buffer >(function);
        } else if *it == "TF_NewTensor\0"{
            TF_NewTensor = std::mem::transmute::<*const usize,  unsafe extern "C" fn(TF_DataType,  *const i64, ::std::os::raw::c_int, *mut ::std::os::raw::c_void, usize,
                                                        unsafe extern "C" fn(data: *mut ::std::os::raw::c_void, usize, *mut ::std::os::raw::c_void),
                                                        *mut ::std::os::raw::c_void) -> *mut TF_Tensor >(function);
        } else if *it == "TF_TensorData\0"{
            TF_TensorData = std::mem::transmute::<*const usize,unsafe extern "C" fn(*const TF_Tensor)-> *mut ::std::os::raw::c_void>(function);
        } else if *it == "TF_AllocateTensor\0"{
            TF_AllocateTensor = std::mem::transmute::<*const usize,unsafe extern "C" fn(TF_DataType, *const i64, ::std::os::raw::c_int, usize)-> *mut TF_Tensor>(function);
        } else if *it == "TF_DeleteTensor\0"{
            TF_DeleteTensor = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_Tensor)>(function);
        } else if *it == "TF_StringEncode\0"{
            TF_StringEncode = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*const u8, usize, *mut u8, usize, *mut TF_Status) -> usize>(function);
        } else if *it == "TF_NewSessionOptions\0"{
            TF_NewSessionOptions = std::mem::transmute::<*const usize,  unsafe extern "C" fn() -> *mut TF_SessionOptions >(function);
        } else if *it == "TF_DeleteSessionOptions\0"{
            TF_DeleteSessionOptions = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_SessionOptions) >(function);
        } else if *it == "TF_NewSession\0"{
            TF_NewSession = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Graph, *const TF_SessionOptions, *mut TF_Status) -> *mut TF_Session >(function);
        } else if *it == "TF_LoadSessionFromSavedModel\0"{
            TF_LoadSessionFromSavedModel = std::mem::transmute::<*const usize, unsafe extern "C" fn(*const TF_SessionOptions, *const TF_Buffer,
                                                                    *const u8 , *const *const u8, ::std::os::raw::c_int, *mut TF_Graph,
                                                                    *mut TF_Buffer, *mut TF_Status)-> *mut TF_Session >(function);
        } else if *it == "TF_CloseSession\0"{
            TF_CloseSession = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Session, *mut TF_Status) >(function);
        } else if *it == "TF_DeleteSession\0"{
            TF_DeleteSession = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Session, *mut TF_Status) >(function);
        } else if *it == "TF_SessionRun\0"{
            TF_SessionRun = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Session,
                                                                                    *const TF_Buffer,
                                                                                    *const TF_Output,
                                                                                    *const *const TF_Tensor,
                                                                                    ::std::os::raw::c_int,
                                                                                    *const TF_Output,
                                                                                    *mut *mut TF_Tensor,
                                                                                    ::std::os::raw::c_int,
                                                                                    *const *const TF_Operation,
                                                                                    ::std::os::raw::c_int,
                                                                                    *mut TF_Buffer, arg1: *mut TF_Status)> (function);
        } else if *it == "TF_NewGraph\0"{
            TF_NewGraph = std::mem::transmute::<*const usize, unsafe extern "C" fn()->*mut TF_Graph >(function);
        } else if *it == "TF_DeleteGraph\0"{
            TF_DeleteGraph = std::mem::transmute::<*const usize, unsafe extern "C" fn(*mut TF_Graph) >(function);
        } else if *it == "TF_NewImportGraphDefOptions\0"{
            TF_NewImportGraphDefOptions = std::mem::transmute::<*const usize,  unsafe extern "C" fn() -> *mut TF_ImportGraphDefOptions >(function);
        } else if *it == "TF_DeleteImportGraphDefOptions\0"{
            TF_DeleteImportGraphDefOptions = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_ImportGraphDefOptions) >(function);
        } else if *it == "TF_GraphOperationByName\0"{
            TF_GraphOperationByName = std::mem::transmute::<*const usize,  unsafe extern "C" fn(*mut TF_Graph, *const u8)-> *mut TF_Operation >(function);
        } else if *it == "TF_GraphImportGraphDef\0"{
            TF_GraphImportGraphDef = std::mem::transmute::<*const usize, unsafe extern "C" fn (graph: *mut TF_Graph, graph_def: *const TF_Buffer, options: *const TF_ImportGraphDefOptions, status: *mut TF_Status)>(function);
        } else if *it == "TF_TensorByteSize\0"{
            TF_TensorByteSize = std::mem::transmute::<*const usize, unsafe extern "C" fn(arg1: *const TF_Tensor) -> usize  >(function);
        } else if *it == "TF_ImportGraphDefOptionsNumReturnOutputs\0"{
            TF_ImportGraphDefOptionsNumReturnOutputs = std::mem::transmute::<*const usize, unsafe extern "C" fn(opts: *const TF_ImportGraphDefOptions) -> i32 >(function);
        } else if *it == "TF_ImportGraphDefOptionsNumReturnOperations\0"{
            TF_ImportGraphDefOptionsNumReturnOperations = std::mem::transmute::<*const usize, unsafe extern "C" fn(opts: *const TF_ImportGraphDefOptions) -> i32 >(function);
        } else if *it == "TF_GraphNumFunctions\0"{
            TF_GraphNumFunctions = std::mem::transmute::<*const usize, unsafe extern "C" fn(g: *const TF_Graph) -> i32 >(function);
        } else if *it == "TF_OperationName\0"{
            TF_OperationName = std::mem::transmute::<*const usize, unsafe extern "C" fn(oper: *mut TF_Operation) -> *const i8 >(function);
        } else if *it == "TF_GraphNextOperation\0"{
            TF_GraphNextOperation = std::mem::transmute::<*const usize, unsafe extern "C" fn(graph: *mut TF_Graph, pos: *mut usize)-> *mut TF_Operation>(function);
        } else if *it == "TF_OperationOpType\0"{
            TF_OperationOpType = std::mem::transmute::<*const usize, unsafe extern "C" fn(oper: *mut TF_Operation)-> *const i8>(function);
        } else if *it == "TF_OperationNumOutputs\0"{
            TF_OperationNumOutputs = std::mem::transmute::<*const usize, unsafe extern "C" fn(oper: *mut TF_Operation)-> i32>(function);
        } else if *it == "TF_OperationNumInputs\0"{
            TF_OperationNumInputs = std::mem::transmute::<*const usize, unsafe extern "C" fn(oper: *mut TF_Operation)-> i32>(function);
        } else if *it == "TF_OperationDevice\0"{
            TF_OperationDevice = std::mem::transmute::<*const usize, unsafe extern "C" fn(oper: *mut TF_Operation)-> *const i8>(function);
        } else if *it == "TF_GraphGetTensorNumDims\0"{
            TF_GraphGetTensorNumDims = std::mem::transmute::<*const usize, unsafe extern "C" fn(graph: *mut TF_Graph, output: TF_Output, status: *mut TF_Status)-> i32>(function);
        } else if *it == "TF_GraphGetTensorShape\0"{
            TF_GraphGetTensorShape = std::mem::transmute::<*const usize, unsafe extern "C" fn(graph: *mut TF_Graph, output: TF_Output, dims: *mut i64, num_dims: i32, status: *mut TF_Status)>(function);
        } else if *it == "TF_GetAllOpList\0"{
            TF_GetAllOpList = std::mem::transmute::<*const usize, unsafe extern "C" fn()->*mut TF_Buffer>(function);
        } else if *it == "TF_NewOperation\0"{
            TF_NewOperation = std::mem::transmute::<*const usize, unsafe extern "C" fn (graph: *mut TF_Graph, 
                                                                                        op_type: *const ::std::os::raw::c_char, 
                                                                                        oper_name: *const ::std::os::raw::c_char) -> *mut TF_OperationDescription>(function);
        } else if *it == "TF_FinishOperation\0"{
            TF_FinishOperation = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, status: *mut TF_Status) -> *mut TF_OperationDescription>(function);
        } else if *it == "TF_AddInputList\0"{
            TF_AddInputList = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, inputs: *const TF_Output, num_inputs: ::std::os::raw::c_int)>(function);
        } else if *it == "TF_AddInput\0"{
            TF_AddInput = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, input: TF_Output)>(function);
        } else if *it == "TF_SetAttrType\0"{
            TF_SetAttrType = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: TF_DataType)>(function);
        } else if *it == "TF_SetAttrTensor\0"{
            TF_SetAttrTensor = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: *mut TF_Tensor, status: *mut TF_Status)>(function);
        } else if *it == "TF_TensorType\0"{
            TF_TensorType = std::mem::transmute::<*const usize, unsafe extern "C" fn (arg1: *const TF_Tensor)->TF_DataType>(function);
        } else if *it == "TF_SetAttrShape\0"{
            TF_SetAttrShape = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, dems: *const i64, num_dims: i32)>(function);
        } else if *it == "TF_SetAttrBool\0"{
            TF_SetAttrBool = std::mem::transmute::<*const usize, unsafe extern "C" fn (desc: *mut TF_OperationDescription, attr_name: *const i8, value: u8)>(function);
        } else if *it == "TF_OperationOutputType\0"{
            TF_OperationOutputType = std::mem::transmute::<*const usize, unsafe extern "C" fn (oper_out: TF_Output)->TF_DataType>(function);
        } else {                                                                      
            println!("Failed to load {}", it);                                        
        }
    }
    return Ok(());
}}
